// Code generated by github.com/iamolegga/rebus; DO NOT EDIT.

package bus

import (
	"context"
	"github.com/iamolegga/rebus/testdata/withcontext"
)

type Bus interface { 
	Command1Executor
	Query1Executor
	RegisterCommand1Handler(Command1Handler)
	RegisterQuery1Handler(Query1Handler)
}

type Command1Executor interface {
	ExecCommand1(ctx context.Context, input withcontext.Command1) error
}

type Query1Executor interface {
	ExecQuery1(ctx context.Context, input withcontext.Query1) (withcontext.Query1Result, error)
}

func New() Bus {
	return &bus{}
}

type bus struct { 
	Command1Handler
	Query1Handler
}

func (b *bus) ExecCommand1(ctx context.Context, input withcontext.Command1) error {
	return b.Command1Handler.Handle(ctx, input)
}

func (b *bus) ExecQuery1(ctx context.Context, input withcontext.Query1) (withcontext.Query1Result, error) {
	return b.Query1Handler.Handle(ctx, input)
}

func (b *bus) RegisterCommand1Handler(h Command1Handler) {
	b.Command1Handler = h
}

func (b *bus) RegisterQuery1Handler(h Query1Handler) {
	b.Query1Handler = h
}

type Command1Handler interface {
	Handle(ctx context.Context, input withcontext.Command1) error
}

type Query1Handler interface {
	Handle(ctx context.Context, input withcontext.Query1) (withcontext.Query1Result, error)
}
